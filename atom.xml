<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>原力小站</title>
  
  <subtitle>扎导的原版正联出了吗？</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-31T03:36:09.093Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.shuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SIMLR算法论文个人翻译</title>
    <link href="http://yoursite.com/2018/07/25/SIMLR%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/07/25/SIMLR算法/</id>
    <published>2018-07-25T12:00:18.373Z</published>
    <updated>2018-07-31T03:36:09.093Z</updated>
    
    <content type="html"><![CDATA[<font size="5"><br>基于多核函数的单细胞RNA序列分析与可视化算法<br></font><p>&#8194; </p><font size="3"><br>摘要：我们将要介绍的SIMLR算法，在理论框架和软件应用上已经实现，它从输入的单细胞RNA序列中学习到一种相似度的信息，随后可以用这种信息来实现降维、聚类和可视化等后续处理。在七个公开的数据集上我们对算法进行了检验并于一些常用的算法进行了比较分析。结果证明了SIMLR算法对大规模数据的良好处理以及极大程度上提高了聚类的效果，同时提升了可视化的效果以及对细胞间相似程度的识别。<br></font><font size="3">关键词：多核函数；低秩约束；单细胞RNA序列</font><br><a id="more"></a><br><br>## 概览<br><br> &#8194; 此前，对单细胞RNA序列的研究揭示了细胞种群间未被洞悉的异构性与功能分化。近期的研究阐释说明了通过对RNA序列的无偏分析，是有可能做到对细胞子群功能特异性的de novo分析的。然而，大部分用来应用的算法都是针对传统的大规模RNA序列数据，而基因的表达结果在一群细胞中被平均化了。这些算法并不能成功地处理如下问题：如噪声数据、离散点以及dropout现象（获取基因表达数据时未能成功识别基因表达结果而标记为0，而实际情况是基因进行了表达）。诸如DropSeq和GemCode的平台已经显著增加了数千个细胞的细胞信息，然而，这类平台产生的多为稀疏数据，其中95%的基因测量结果被标记为0。对于诸如降维、聚类以及数据可视化等无监督学习的方法来说，其中一个关键就是相似度矩阵的学习，而这个矩阵对于不同平台或者生物实验得到的数据并不通用。为了解决上述问题，我们提出了SIMLR算法，一个从输入的单细胞RNA序列数据中学习细胞与细胞之间相似度矩阵的框架。<br><br> &#8194; 相较于传统的算法，SIMLR算法有三个主要的优势：首先，它通过使用多个核函数的方法来学习一个最符合输入数据的结构的相似性矩阵。常规的降维或聚类算法对数据的假设有时并不适用于单细胞RNA序列数据。而多个核函数被证实在描绘数据多角度的信息下有着更好的效果，而且相对于单个核函数具有更好的灵活性。第二，对于高维度下的dropout现象，SIMLR算法通过对学习的相似度矩阵应用秩约束以及使用图扩散的方法来解决。秩约束的应用增强了相似度矩阵的分块对角结构，而图扩散方法提高了对弱相似度的识别。第三，算法习得的相似度矩阵可以被高效的用来后续的数据分析，比如通过SNE算法进行数据在低维空间下的可视化。<br><br>&#8194; 我们通过在四个公开的单细胞数据集上应用SIMLR算法来与传统的算法比较，结果是SIMLR算法习得的相似度矩阵在表现数据相似度上要表现得更好。每个数据集中细胞所属的种类是先验的并且在研究中已经被证实正确。通过输入数据集和细胞的种类数，SIMLR算法就能学习出一个细胞间的相似度矩阵，而不需要输入细胞真实所属类别的标签信息。而且相较于传统的相关系数或欧几里得距离衡量相似度，SIMLR算法的结果要更加接近真实结果。特别的是，Buettner数据集的真实标签是细胞周期的状态，我们在这个数据集上额外应用了SIMLR算法来对基因进行排序。算法输出一个基因网络，来展现不同的基因在细胞各个周期、翻译以及代谢过程中的相关性。<br><br><img src="https://s1.ax1x.com/2018/07/31/PdhleH.png" alt="Figure 1"><br><br>&#8194; 图表1：SIMLR算法的总览。给定一个基因表达数据的矩阵作为输入，算法构建并学习多个核函数之间的权重，并构建出一个相似度矩阵。给定细胞种类数C作为输入，构建出的相似度矩阵将有一个含C个分块的分块对角矩阵，每个分块中的细胞都更为相似。算法使用得到的相似度矩阵来进行降维、可视化、聚类等后续处理。实心箭头代表了需要被用来构建相似度矩阵的信息，而点线箭头则表明聚类的结果可以与可视化以及基因排序相结合。2D散点图中的每一个点代表一个细胞，而不同的颜色代表细胞所属的不同类别。<br><br>&#8194; 为了分析算法在降维上的效果，我们与8个传统的降维算法进行了比较，包括主成分分析、tSNE以及ZIFA算法。在六种不同的表现算法优劣矩阵中，SIMLE算法在四个公开的数据集上表现出色，并且远远的拉开了与第二名的差距。<br><br>&#8194; 我们还进行了低维数据的可视化实验。结果表明，在各个数据集上SIMLR算法的结果不仅能吻合数据集给出的真实标签，甚至在秩约束有关的参数没有贡献时同样能保持相似度矩阵的分块对角结构。特别地，在Kolodziejczyk这个数据集上，我们还从SIMLR算法的结果上发现，在已知的分类结果上其实还能继续往下细分，这个结果也符合与这个数据集有关的理论研究。<br><br>&#8194; SIMLR算法同样可以用来进行细胞聚类，通过降维后应用k-means算法或者直接对习得的相似度矩阵使用AP近邻算法来实现。后者的表现性要远远超过使用皮尔逊相关系数或欧几里得距离来衡量相似性的方法。而前者的表现性在四个数据集上也比现有的针对单细胞的聚类算法要更好。<br><br>&#8194; 为了检验算法的能力，我们应用了更多更有挑战性的方案。我们分析了一个GemCode平台上提供的周边血液单核球细胞的稀疏数据集，里面包含了2700个细胞且其中95%的基因表达结果被标记为0。通过降维后应用k-means算法，我们识别出八种主要的细胞类别，包括一个只含12个细胞的megakaryocyte种类。除此之外，我们还在不同的已经得到充分研究的数据集上试验了SIMLR算法的表现性。<br><br>&#8194; 为了说明SIMLR算法在大规模数据上的表现性，我们在三个公开的大规模数据集上进行了试验。我们对真实标签与算法输出的预测表情的相关性进行了计算。对于Zeisei数据集，我们应用了一个二级聚类的方法，发现SIMLR算法可以用来进行在对细胞的层次结构的分析。而且，低维可视化的结果也很好的符合了真实的数据标签。即使是大规模数据集中因为噪声和离散点所造成的相似信息被隐藏的情况，SIMLR算法也能学习一个合适的细胞之间的距离。<br><br><img src="https://s1.ax1x.com/2018/07/31/PdhGFI.png" alt="Figure 2"><br>&#8194; 图表2：在不同数据集上的测试结果。分别给出了SIMLR算法、基于高斯核的欧几里得距离以及皮尔逊相关系数所得到的相似度矩阵。排放的次序基于相似度的高低。矩阵中的细胞都按照真实的种类来进行排列，使得同一种类的细胞排列在一起，坐标轴上的不同颜色代表不同的种类。可以看出，SIMLR算法的相似度矩阵的分块对角结构与真实标签基本符合。&#8194;<br><br>&#8194; 总的来说，SIMLR算法可以基于不同的数据集通用地判断那些细胞更为相似，即判断结果不受特定数据集影响，并应用降维、聚类、数据可视化等分析方法。SIMLR算法在有着清晰分类的数据集上表现出色，而我们预测这个多核学习的框架在分类不明显的数据集上也会同样产生作用。<br><br><img src="https://s1.ax1x.com/2018/07/31/PdhMOe.png" alt="Figure 3"><br>&#8194; 图表3： 2维可视化结果的比较。坐标轴无实际意义。每个点代表一个细胞，而靠得越近的点代表相似度越高。数据可视化时没有输入真实的标签信息，在算法的输出时才让各个数据点标上真实的颜色以检验算法的效果。<br><br><br>## 算法详述：<br>### 算法的具体实现以及数据的可靠性：<br>SIMLR算法提供了Matlab和R语言两个版本的实现（<a href="https://github.com/BatzoglouLabSU/SIMLR）" target="_blank" rel="noopener">https://github.com/BatzoglouLabSU/SIMLR）</a><br><br>&#8194; k-means算法的实现我们使用了Marlab和R语言自带的模块。而SNE算法我们修改了两个语言中这一模块的源代码。四个公开的数据集随着源代码一起被提供。而三个大型的数据集可以在相应的平台上得到。输入一个N×M的的基因表达矩阵，N代表细胞个数，M代表基因数。SIMLR算法将输出一个S×S的相似性矩阵。其中Sij表示两个细胞之间的相似度。给定一个细胞种类数C，算法假定输出的相似度矩阵将有一个含C个分块的分块对角矩阵，各个分块中的细胞更为相似。我们对两个细胞之间的距离定义为：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/PdhuQO.png" alt="Formula 1"><br><br>其中wl代表核函数的权重<br><br></div><br><br><font size="4"><br>算法依据如下损失函数来计算细胞与细胞之间的相似性：<br></font><p><img src="https://s1.ax1x.com/2018/07/31/PdhKyD.png" alt="Formula 2"><br>&#8194; 其中IN和IC分别为N×N和C×C的单位矩阵，tr(.)代表矩阵的秩，β和γ均为非零值，||S||F为范数表示，L为辅助的用来对S进行低秩约束。因此这个损失函数求解三个参数：相似度矩阵S，核函数权重向量w以及一个结构为N×C的秩约束矩阵L。</p><font size="3"><br>&#8194; 损失函数的第一项含义为，如果两个细胞间的距离很远，则它们的相似度应该很低。第二项是一个对S的正则化，防止S矩阵过于接近一个单位矩阵。如果细胞可以被划分为C类，则每一类中的细胞更为相似，理想情况下矩阵S的秩为C。因此，损失函数的第三项以及L矩阵的引入增强了S的低秩结构，而矩阵（IN-S）即为拉普拉斯矩阵，在一个相似图中，每个节点代表一个细胞，边衡量节点间的相似性。第四项对核函数的权重进行约束，防止单核函数情况的出现。实践证明，这个正则化项提高了相似矩阵的表现。<br></font>  <h3 id="核函数的构建：我们以带有不同超参数的高斯核为基础构建不同的核函数，实践证明相对其它核函数高斯核的表现更好。"><a href="#核函数的构建：我们以带有不同超参数的高斯核为基础构建不同的核函数，实践证明相对其它核函数高斯核的表现更好。" class="headerlink" title="核函数的构建：我们以带有不同超参数的高斯核为基础构建不同的核函数，实践证明相对其它核函数高斯核的表现更好。"></a>核函数的构建：我们以带有不同超参数的高斯核为基础构建不同的核函数，实践证明相对其它核函数高斯核的表现更好。</h3><p><img src="https://s1.ax1x.com/2018/07/31/Pdh1wd.png" alt="Formula 3"></p><p>式中||ci - cj||表示细胞i和j之间的欧几里得距离。</p><font size="3"> 方差ɛij的定义式如下：</font><br><img src="https://s1.ax1x.com/2018/07/31/Pdh3TA.png" alt="Formula 4"><br><br>&#8194; 因此，每一个核函数被一对参数(σ，k).我们设定k = 10，12，14,…,30 以及σ = 1.0，1.25，1.5，1.75，2，产生了55个不同的核函数。然而，实践证明，算法对核函数的数量以及参数的选择并不敏感。<br><br><br>### 初始化：<br>#### 核函数的权重w被初始化为核函数数量的倒数：<br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/PdhTt1.png" alt="Formula 5"><br><br></div><br><br>#### 相似度矩阵S被初始化为：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/PdhokR.png" alt="Formula 6"><br><br></div><br><br>#### 而矩阵L被初始化为拉普拉斯矩阵（IN - S）的前C个特征向量。<br><br>### 优化算法：我们对S,L和w进行优化。上文中的优化式非凸，但固定某两个参数得到的目标函数为凸函数。因此我们可以有效的应用凸优化算法来进行求解。<br><br>### 步骤1：固定L和w对S进行更新。损失函数可以被重写为：<br><br><img src="https://s1.ax1x.com/2018/07/31/Pdhbp6.png" alt="Pdhbp6.png"><br><br>&#8194; 目标函数中第一项求和式以及约束项均为线性，而第二项是一个二次项，它可以在多项式复杂度的时间内计算出来。<br><br>### 步骤2：固定S和w对L进行更新。损失函数可以被重写为：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/Pdh579.png" alt="Pdh579.png"><br><br></div><br><br>&#8194; 此时对L矩阵的求解就是拉普拉斯矩阵（S-IN）对应的C个最大特征值的特征向量。<br><br>### 步骤三：固定S和L对w进行更新。同样地，损失函数可以被重写为如下形式：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/Pdh7fx.png" alt="Pdh7fx.png"><br><br></div><br><br>&#8194; 对于这样一个包含凸函数和线性约束的问题，任何一个凸优化算法都可以进行求解。<br><br>### 步骤四：基于扩散方法的相似度矩阵优化。我们应用了一种扩散方法来减少噪声和dropout现象对S矩阵的影响。给定矩阵S，我们构建如下形式的过渡矩阵P：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/Pdhjne.png" alt="Pdhjne.png"><br><br></div><br><br>&#8194; Ak(i)代表一个集合，里面包含了细胞i的k个近邻细胞的索引。构建出来的过渡矩阵是稀疏的，并且保留了极大部分的相似度结构。算法的更新方法如下所示：<br><br><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/Pdhq1K.png" alt="Pdhq1K.png"><br><br></div><br><br>&#8194; H(0)ij = Sij作为输入，而最终迭代出来的结果Hij作为新的相似值Sij。这个额外的扩散方法将会很大程度上避免单细胞RNA序列数据中的噪声值所带来的影响。然而，因为这个算法的高计算复杂度，在面对大规模数据集时它无法发挥有效作用。<br><br><font size="3"><br>&#8194; SIMLR算法重复步骤1-4直到算法收敛。随后使用得到的相似度矩阵S进行后续分析：</font><h2 id="后续分析"><a href="#后续分析" class="headerlink" title="后续分析"></a>后续分析</h2><h3 id="降维处理："><a href="#降维处理：" class="headerlink" title="降维处理："></a>降维处理：</h3><p>&#8194; 算法基于SNE算法进行降维，并进行了调整。不同点在于，tSNE算法基于高斯核来计算高维度空间下数据之间的相似度，随后将其映射到低维空间并保留这个相似度信息。我们没有选择直接输入基因表达矩阵而是输入了相似度矩阵S。</p><h3 id="可视化："><a href="#可视化：" class="headerlink" title="可视化："></a>可视化：</h3><p>&#8194; 我们使用降维算法来投影到二维或三维空间进行可视化。如k-means聚类，我们将维度降到B维，得到一个N×B相应的矩阵Z，随后应用k-means算法来对于细胞进行聚类。B的值与输入的C的值相同。C同时也是上文提到的秩约束的参数。</p><h3 id="基于相似度矩阵的基因排序："><a href="#基于相似度矩阵的基因排序：" class="headerlink" title="基于相似度矩阵的基因排序："></a>基于相似度矩阵的基因排序：</h3><p>&#8194; 我们通过计算某个基因在不同细胞中表达的值与习得的相似度的相关程度来对基因进行排序。给定相似度矩阵S和某个基因在所有细胞中的表达结果f，表达式如下：</p><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/PdhL6O.png" alt="PdhL6O.png"><br><br></div><p>&#8194; 这是一个经典的用来衡量基因和相似度之间相关性的无监督特征排序算法。表达式的值越高，则基因在不同细胞中的表达越重要。然而，表达式对相似度矩阵中的噪声值非常敏感。为了克服这个问题，我们随机选取一定比例的细胞（如细胞总数的80%），随后根据剩余细胞的相似度矩阵来对基因进行排序。</p><h3 id="大规模数据集上的应用："><a href="#大规模数据集上的应用：" class="headerlink" title="大规模数据集上的应用："></a>大规模数据集上的应用：</h3><p>&#8194; 我们在含有数万个细胞的数据集上进行了试验，关键因素在于用KNN相似度来近似于细胞的相似度。第一步，我们采用了目前更为先进的近邻搜索算法ANNOY (<a href="https://github.com/spotify/annoy)，ANNOY算法认为，一个近邻点的近邻也可能是一个近邻点。因此，在构建出KNN图后，算法只更新每个细胞所预先选定的前k个近邻点。因为得到的相似度矩阵是稀疏的，我们使用Spectra" target="_blank" rel="noopener">https://github.com/spotify/annoy)，ANNOY算法认为，一个近邻点的近邻也可能是一个近邻点。因此，在构建出KNN图后，算法只更新每个细胞所预先选定的前k个近邻点。因为得到的相似度矩阵是稀疏的，我们使用Spectra</a> (<a href="http://yixuan.cos.name/spectra/)来对L进行求解。当我们按照这种方式而不是进行涉及到矩阵求逆运算的闭式求解，我们只需要在有限次的迭代中就可以得到一个结果。" target="_blank" rel="noopener">http://yixuan.cos.name/spectra/)来对L进行求解。当我们按照这种方式而不是进行涉及到矩阵求逆运算的闭式求解，我们只需要在有限次的迭代中就可以得到一个结果。</a></p><p>&#8194; 在我们得到相似度矩阵后，我们就可以进行细胞可视化和细胞聚类了。聚类时，从t-SNE算法中获得嵌入的低维空间的过程的计算量很大。相反，我们采用了一种谱聚类算法，它基本上等同于我们的SIMLR算法中对矩阵L应用k均值。这种简单的算法对稀疏相似性的聚类非常有效，并可扩展到数以万计的细胞中。对于可视化，由于我们仅将细胞到细胞的相似性映射到二维或三维空间，因此应用t-SNE算法在计算上仍是可行的。我们对tSNE算法中的Barnes–Hut算法进行了调整。</p><h2 id="数据来源："><a href="#数据来源：" class="headerlink" title="数据来源："></a>数据来源：</h2><p>&#8194; 我们在本文中使用了七个单细胞RNA-seq的数据集。前四个数据集每个包含少于1,000个细胞，而最后三个数据集包含数千到数万个细胞。下面是所有单细胞RNA-seq数据集的详细描述。</p><p>&#8194;（1）11个细胞群，包括神经细胞和血细胞（Pollen数据集）。该数据集旨在测试低覆盖率单细胞RNA-seq在鉴别不同细胞群体方面的效用，因此含有多种细胞类型的混合物：皮肤细胞，多能干细胞，血细胞和神经细胞。该数据集包括在高深度和低深度处测序的样本。我们分析了高深度样本，每个样本的平均测序数为890万。</p><p>&#8194; （2）具有感觉亚型的神经元细胞（Usoskin数据集）。该数据集包含来自小鼠背根神经节的622个细胞，每个细胞平均有114万个读段。作者将细胞分为四种神经元类型：肽能伤害性伤害感受器，非肽能伤害性伤害感受器，含神经丝，含酪氨酸羟化酶。</p><p>&#8194; （3）不同细胞周期阶段的胚胎干细胞（Buettner数据集）。该数据集来自对照研究，该对照研究量化了细胞周期对个体小鼠胚胎干细胞（mESC）中基因表达水平的影响。对于182个细胞中的每一个细胞，获得平均五十万个读数，并且至少20％的读数被定位于mm9小鼠基因组上的已知外显子。使用荧光激活细胞分选将细胞分选为细胞周期的三个阶段，并且使用金标准Hoechst染色对它们进行验证。</p><p>&#8194; （4）不同环境条件下的多能细胞（Kolodziejczyk数据集）。该数据集是从干细胞研究中获得的，研究不同培养条件如何影响mESC的多能状态。该研究从涉及三种不同培养条件的九个不同实验中量化了704个mESC中约10,000个基因的表达水平。每个细胞平均获得900万个读数，超过60％的读数映射到小家鼠基因组上的外显子。</p><p>&#8194; （5）具有39个亚型的小鼠视网膜细胞（Macoskco数据集）。通过基于液滴的高通量技术Drop-seq获得，该数据集包括44,808个单元的UMI（3端）计数（由其定制的计算管道识别）。细胞类型通过PCA和基于密度的聚类进行分类，并且通过差异基因表达进行验证。根据原始处理程序，我们过滤掉少于900个基因的细胞（涉及到11,040个细胞）用于无监督分析。</p><p>&#8194; （6）来自一个健康人类的PBMCs数据集（PBMC68k数据集）。通过GemCode平台生成scRNA-seq文库，这是一种基于液滴的高通量技术，以及具有UMI（3’端）计数的68,560个细胞通过其定制的计算流水线来识别。这种细胞群包括健康人体内的主要免疫细胞类型。</p><p>&#8194; （7）使用独特的分子识别（UMI）分析和3’端计数收集来自小鼠皮质和海马的细胞（Zeisel数据集）。收集来自小鼠脑的3,005个细胞，并且通过分级双聚类鉴定了47个亚型，并通过基因标记进行了验证。</p><p>&#8194;  对于以上涉及到的数据集，我们进行了如下的数据预处理：</p><div align="center"><br><br><img src="https://s1.ax1x.com/2018/07/31/PdhOXD.png" alt="PdhOXD.png"><br><br></div>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;5&quot;&gt;&lt;br&gt;基于多核函数的单细胞RNA序列分析与可视化算法&lt;br&gt;&lt;/font&gt;

&lt;p&gt;&amp;#8194; &lt;/p&gt;
&lt;font size=&quot;3&quot;&gt;&lt;br&gt;摘要：我们将要介绍的SIMLR算法，在理论框架和软件应用上已经实现，它从输入的单细胞RNA序列中学习到一种相似度的信息，随后可以用这种信息来实现降维、聚类和可视化等后续处理。在七个公开的数据集上我们对算法进行了检验并于一些常用的算法进行了比较分析。结果证明了SIMLR算法对大规模数据的良好处理以及极大程度上提高了聚类的效果，同时提升了可视化的效果以及对细胞间相似程度的识别。&lt;br&gt;&lt;/font&gt;

&lt;font size=&quot;3&quot;&gt;关键词：多核函数；低秩约束；单细胞RNA序列&lt;/font&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="SIMLR" scheme="http://yoursite.com/tags/SIMLR/"/>
    
      <category term="machine-learning" scheme="http://yoursite.com/tags/machine-learning/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter Notebook 的快捷键</title>
    <link href="http://yoursite.com/2018/07/24/jupyter%20notebook%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2018/07/24/jupyter notebook快捷键/</id>
    <published>2018-07-24T06:16:20.378Z</published>
    <updated>2018-07-24T06:22:27.766Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook 有两种键盘输入模式。编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。<br><a id="more"></a></p><h3 id="命令模式-按键-Esc-开启"><a href="#命令模式-按键-Esc-开启" class="headerlink" title="命令模式 (按键 Esc 开启)"></a>命令模式 (按键 Esc 开启)</h3><ul><li><strong>Enter</strong> : 转入编辑模式</li><li><strong>Shift-Enter</strong> : 运行本单元，选中下个单元</li><li><strong>Ctrl-Enter</strong> : 运行本单元</li><li><strong>Alt-Enter</strong> : 运行本单元，在其下插入新单元</li><li><strong>Y</strong> : 单元转入代码状态</li><li><strong>M</strong> :单元转入markdown状态</li><li><strong>R</strong> : 单元转入raw状态</li><li><strong>1</strong> : 设定 1 级标题</li><li><strong>2</strong> : 设定 2 级标题</li><li><strong>3</strong> : 设定 3 级标题</li><li><strong>4</strong> : 设定 4 级标题</li><li><strong>5</strong> : 设定 5 级标题</li><li><strong>6</strong> : 设定 6 级标题</li><li><strong>Up</strong> : 选中上方单元</li><li><strong>K</strong> : 选中上方单元</li><li><strong>Down</strong> : 选中下方单元</li><li><strong>J</strong> : 选中下方单元</li><li><strong>Shift-K</strong> : 扩大选中上方单元</li><li><strong>Shift-J</strong> : 扩大选中下方单元</li><li><strong>A</strong> : 在上方插入新单元</li><li><strong>B</strong> : 在下方插入新单元</li><li><strong>X</strong> : 剪切选中的单元</li><li><strong>C</strong> : 复制选中的单元</li><li><strong>Shift-V</strong> : 粘贴到上方单元</li><li><strong>V</strong> : 粘贴到下方单元</li><li><strong>Z</strong> : 恢复删除的最后一个单元</li><li><strong>D,D</strong> : 删除选中的单元</li><li><strong>Shift-M</strong> : 合并选中的单元</li><li><strong>Ctrl-S</strong> : 文件存盘</li><li><strong>S</strong> : 文件存盘</li><li><strong>L</strong> : 转换行号</li><li><strong>O</strong> : 转换输出</li><li><strong>Shift-O</strong> : 转换输出滚动</li><li><strong>Esc</strong> : 关闭页面</li><li><strong>Q</strong> : 关闭页面</li><li><strong>H</strong> : 显示快捷键帮助</li><li><strong>I,I</strong> : 中断Notebook内核</li><li><strong>0,0</strong> : 重启Notebook内核</li><li><strong>Shift</strong> : 忽略</li><li><strong>Shift-Space</strong> : 向上滚动</li><li><strong>Space</strong> : 向下滚动</li></ul><h3 id="编辑模式-Enter-键启动"><a href="#编辑模式-Enter-键启动" class="headerlink" title="编辑模式 ( Enter 键启动)"></a>编辑模式 ( Enter 键启动)</h3><ul><li><strong>Tab</strong> : 代码补全或缩进</li><li><strong>Shift-Tab</strong> : 提示</li><li><strong>Ctrl-]</strong> : 缩进</li><li><strong>Ctrl-[</strong> : 解除缩进</li><li><strong>Ctrl-A</strong> : 全选</li><li><strong>Ctrl-Z</strong> : 复原</li><li><strong>Ctrl-Shift-Z</strong> : 再做</li><li><strong>Ctrl-Y</strong> : 再做</li><li><strong>Ctrl-Home</strong> : 跳到单元开头</li><li><strong>Ctrl-Up</strong> : 跳到单元开头</li><li><strong>Ctrl-End</strong> : 跳到单元末尾</li><li><strong>Ctrl-Down</strong> : 跳到单元末尾</li><li><strong>Ctrl-Left</strong> : 跳到左边一个字首</li><li><strong>Ctrl-Right</strong> : 跳到右边一个字首</li><li><strong>Ctrl-Backspace</strong> : 删除前面一个字</li><li><strong>Ctrl-Delete</strong> : 删除后面一个字</li><li><strong>Esc</strong> : 进入命令模式</li><li><strong>Ctrl-M</strong> : 进入命令模式</li><li><strong>Shift-Enter</strong> : 运行本单元，选中下一单元</li><li><strong>Ctrl-Enter</strong> : 运行本单元</li><li><strong>Alt-Enter</strong> : 运行本单元，在下面插入一单元</li><li><strong>Ctrl-Shift–</strong> : 分割单元</li><li><strong>Ctrl-Shift-Subtract</strong> : 分割单元</li><li><strong>Ctrl-S</strong> : 文件存盘</li><li><strong>Shift</strong> : 忽略</li><li><strong>Up</strong> : 光标上移或转入上一单元</li><li><strong>Down</strong> :光标下移或转入下一单元</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jupyter Notebook 有两种键盘输入模式。编辑模式，允许你往单元中键入代码或文本；这时的单元框线是绿色的。命令模式，键盘输入运行程序命令；这时的单元框线是灰色。&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>VPN</title>
    <link href="http://yoursite.com/2018/04/06/vpn/"/>
    <id>http://yoursite.com/2018/04/06/vpn/</id>
    <published>2018-04-06T11:58:10.712Z</published>
    <updated>2018-04-07T02:17:29.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="edu-cn的学校邮箱-5美元-11个月的境外服务器"><a href="#edu-cn的学校邮箱-5美元-11个月的境外服务器" class="headerlink" title="edu.cn的学校邮箱+5美元 = 11个月的境外服务器"></a>edu.cn的学校邮箱+5美元 = 11个月的境外服务器</h3><h4 id="领取github的vps优惠码"><a href="#领取github的vps优惠码" class="headerlink" title="领取github的vps优惠码"></a>领取github的vps优惠码</h4><p>教程<br><a href="https://www.ichenfei.com/get-github-students-gift.html" target="_blank" rel="noopener">https://www.ichenfei.com/get-github-students-gift.html</a><br>领取优惠码页面<br><a href="https://education.github.com/pack/offers#digitalocean" target="_blank" rel="noopener">https://education.github.com/pack/offers#digitalocean</a><br>vps开通页面(需要翻墙，学校使用ipv6地址可以直接翻出去)<br><a href="https://www.digitalocean.com/" target="_blank" rel="noopener">https://www.digitalocean.com/</a><br>不要使用一次性邮箱注册账号，因为以后每次登陆都要邮箱验证</p><p>登陆页面<br><a href="https://cloud.digitalocean.com/login" target="_blank" rel="noopener">https://cloud.digitalocean.com/login</a> (建议翻墙访问)</p><p>注册paypal账号来支付<br><a href="https://www.paypal.com/c2/home" target="_blank" rel="noopener">https://www.paypal.com/c2/home</a><br><a id="more"></a><br>paypal绑定了银行卡和手机，建议用不常用的银行卡，然后充35块钱进去<br>支付成功后，激活digitalocean账号，填入github的优惠卷，获得50美元</p><h4 id="创建自己的服务器，建议选SFO一区的服务器，不容易被墙，配置的话5美元那种就差不多了，服务器型号建议ubuntu16-04"><a href="#创建自己的服务器，建议选SFO一区的服务器，不容易被墙，配置的话5美元那种就差不多了，服务器型号建议ubuntu16-04" class="headerlink" title="创建自己的服务器，建议选SFO一区的服务器，不容易被墙，配置的话5美元那种就差不多了，服务器型号建议ubuntu16.04"></a>创建自己的服务器，建议选SFO一区的服务器，不容易被墙，配置的话5美元那种就差不多了，服务器型号建议ubuntu16.04</h4><h4 id="重置密码"><a href="#重置密码" class="headerlink" title="重置密码"></a>重置密码</h4><p><img src="http://upload-images.jianshu.io/upload_images/7373593-3d8765dd4bde43be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="57295b5ea77d1d85511644c4506495d.png"></p><h4 id="安装bbr加速脚本，谷歌算法，可加速"><a href="#安装bbr加速脚本，谷歌算法，可加速" class="headerlink" title="安装bbr加速脚本，谷歌算法，可加速"></a>安装bbr加速脚本，谷歌算法，可加速</h4><p>bbr.sh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#！/bin/bash</span><br><span class="line">wget http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.13/linux-image-4.13.0-041300-generic_4.13.0-041300.201709031731_amd64.deb</span><br><span class="line">dpkg -i linux-image-4.13.0-041300-generic_4.13.0-041300.201709031731_amd64.deb</span><br><span class="line">rm linux-image-4.13.0-041300-generic_4.13.0-041300.201709031731_amd64.deb</span><br><span class="line">echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo &quot;you need to reboot systerm&quot;</span><br></pre></td></tr></table></figure></p><h5 id="shadowsocks客户端"><a href="#shadowsocks客户端" class="headerlink" title="shadowsocks客户端"></a>shadowsocks客户端</h5><p>各平台客户端<br><a href="https://shadowsocks.org/en/download/clients.html" target="_blank" rel="noopener">https://shadowsocks.org/en/download/clients.html</a><br>windows<br><a href="https://github.com/shadowsocks/shadowsocks-windows/releases" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-windows/releases</a><br>linux<br><a href="https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation" target="_blank" rel="noopener">https://github.com/shadowsocks/shadowsocks-qt5/wiki/Installation</a><br>windows<br><img src="http://upload-images.jianshu.io/upload_images/7373593-01a9110368368754.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="91797f9f9fa722cd058d454a9c40bc6.png"></p><h4 id="用python的pip来安装shadowsocks，适用于任何linux平台"><a href="#用python的pip来安装shadowsocks，适用于任何linux平台" class="headerlink" title="用python的pip来安装shadowsocks，适用于任何linux平台"></a>用python的pip来安装shadowsocks，适用于任何linux平台</h4><p><code>apt-get install python-pip</code><br><code>pip install shadowsocks</code></p><h4 id="创建配置文件ss-json"><a href="#创建配置文件ss-json" class="headerlink" title="创建配置文件ss.json"></a>创建配置文件ss.json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot; : &quot;x.x.x.x&quot;,</span><br><span class="line">&quot;server_port&quot; : 30001,</span><br><span class="line">&quot;local_port&quot; : 1080,</span><br><span class="line">&quot;password&quot; : &quot;xxxxxxx&quot;,</span><br><span class="line">&quot;timeout&quot; : 600,</span><br><span class="line">&quot;method&quot; : &quot;aes-256-cfb&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c ss.json</span><br></pre></td></tr></table></figure><h2 id="探索新世界吧"><a href="#探索新世界吧" class="headerlink" title="探索新世界吧:)"></a>探索新世界吧:)</h2>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;edu-cn的学校邮箱-5美元-11个月的境外服务器&quot;&gt;&lt;a href=&quot;#edu-cn的学校邮箱-5美元-11个月的境外服务器&quot; class=&quot;headerlink&quot; title=&quot;edu.cn的学校邮箱+5美元 = 11个月的境外服务器&quot;&gt;&lt;/a&gt;edu.cn的学校邮箱+5美元 = 11个月的境外服务器&lt;/h3&gt;&lt;h4 id=&quot;领取github的vps优惠码&quot;&gt;&lt;a href=&quot;#领取github的vps优惠码&quot; class=&quot;headerlink&quot; title=&quot;领取github的vps优惠码&quot;&gt;&lt;/a&gt;领取github的vps优惠码&lt;/h4&gt;&lt;p&gt;教程&lt;br&gt;&lt;a href=&quot;https://www.ichenfei.com/get-github-students-gift.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.ichenfei.com/get-github-students-gift.html&lt;/a&gt;&lt;br&gt;领取优惠码页面&lt;br&gt;&lt;a href=&quot;https://education.github.com/pack/offers#digitalocean&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://education.github.com/pack/offers#digitalocean&lt;/a&gt;&lt;br&gt;vps开通页面(需要翻墙，学校使用ipv6地址可以直接翻出去)&lt;br&gt;&lt;a href=&quot;https://www.digitalocean.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.digitalocean.com/&lt;/a&gt;&lt;br&gt;不要使用一次性邮箱注册账号，因为以后每次登陆都要邮箱验证&lt;/p&gt;
&lt;p&gt;登陆页面&lt;br&gt;&lt;a href=&quot;https://cloud.digitalocean.com/login&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cloud.digitalocean.com/login&lt;/a&gt; (建议翻墙访问)&lt;/p&gt;
&lt;p&gt;注册paypal账号来支付&lt;br&gt;&lt;a href=&quot;https://www.paypal.com/c2/home&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.paypal.com/c2/home&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="shadowsock" scheme="http://yoursite.com/tags/shadowsock/"/>
    
      <category term="vpn" scheme="http://yoursite.com/tags/vpn/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/05/hello-world/"/>
    <id>http://yoursite.com/2018/04/05/hello-world/</id>
    <published>2018-04-05T14:57:07.298Z</published>
    <updated>2018-04-06T12:22:17.621Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="tutorial" scheme="http://yoursite.com/tags/tutorial/"/>
    
  </entry>
  
</feed>
